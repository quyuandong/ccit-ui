import{_ as a,c as s,o as e,Q as n}from"./chunks/framework.0b95bfbb.js";const y=JSON.parse('{"title":"参与共建","description":"","frontmatter":{"title":"参与共建","desc":"参与共建"},"headers":[],"relativePath":"join.md","filePath":"join.md","lastUpdated":1698659482000}'),l={name:"join.md"},p=n(`<div class="warning custom-block"><p class="custom-block-title">⚠开发注意事项</p><p>请务必保证代码规范及质量，在提交的时候会进行校验，不通过则无法提交，可通过命令<code>yarn lint</code>进行代码检查，<code>yarn lint:fix</code>进行代码修复。</p><p>请仔细阅读本文档，严格按照以下流程参与共建，你需要拉取新分支来共建代码。</p></div><p>该项目采用的是<a href="https://yarnpkg.com/" target="_blank" rel="noreferrer"><code>yarn</code></a>的包管理器，如本地未安装<code>yarn</code>，可以通过命令<code>npm install -g yarn</code>进行安装。</p><h1 id="🖥开发前准备" tabindex="-1">🖥开发前准备 <a class="header-anchor" href="#🖥开发前准备" aria-label="Permalink to &quot;🖥开发前准备&quot;">​</a></h1><p>拉取代码</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git clone https://github.com/quyuandong/ccit-ui.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git clone https://github.com/quyuandong/ccit-ui.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装依赖</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yarn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yarn</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>启动本地文档站点</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yarn docs:dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yarn docs:dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="👋-组件共建" tabindex="-1">👋 组件共建 <a class="header-anchor" href="#👋-组件共建" aria-label="Permalink to &quot;👋 组件共建&quot;">​</a></h1><h2 id="规范" tabindex="-1">规范 <a class="header-anchor" href="#规范" aria-label="Permalink to &quot;规范&quot;">​</a></h2><ul><li>书写规范 ESlint + Prettier，注意编辑器需要安装对应插件，增强提示功能</li><li>样式前缀统一使用 <code>jy-ui-xxx</code>，参考<code>packages</code> -&gt; <code>utils</code> -&gt; <code>useTools</code>文件中的通用函数</li><li>组件基于 Ant Design Vue，在进行组件封装时请务必保证原有功能的完整</li></ul><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><p>以<code>JButton</code>组件为例（注意大小写规范）</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">├─docs</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─components</span></span>
<span class="line"><span style="color:#e1e4e8;">│  │      JButton.md			组件说明文档</span></span>
<span class="line"><span style="color:#e1e4e8;">│  │</span></span>
<span class="line"><span style="color:#e1e4e8;">│  └─demos</span></span>
<span class="line"><span style="color:#e1e4e8;">│         JButton			组件示例</span></span>
<span class="line"><span style="color:#e1e4e8;">│             index.vue</span></span>
<span class="line"><span style="color:#e1e4e8;">│</span></span>
<span class="line"><span style="color:#e1e4e8;">└─packages</span></span>
<span class="line"><span style="color:#e1e4e8;">    ├─JButton					组件目录</span></span>
<span class="line"><span style="color:#e1e4e8;">    │  │  index.ts				打包暴露入口</span></span>
<span class="line"><span style="color:#e1e4e8;">    │  │</span></span>
<span class="line"><span style="color:#e1e4e8;">    │  └─src					组件主目录（可以存放静态资源等）</span></span>
<span class="line"><span style="color:#e1e4e8;">    │     index.vue				组件文件</span></span>
<span class="line"><span style="color:#e1e4e8;">    │</span></span>
<span class="line"><span style="color:#e1e4e8;">    ├─index.ts					所有组件注册入口（新增组件需要在这里注册）</span></span>
<span class="line"><span style="color:#e1e4e8;">    │</span></span>
<span class="line"><span style="color:#e1e4e8;">    └─utils</span></span>
<span class="line"><span style="color:#e1e4e8;">        useTools.ts				组件库所使用到的工具函数，不向外暴露</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">├─docs</span></span>
<span class="line"><span style="color:#24292e;">│  ├─components</span></span>
<span class="line"><span style="color:#24292e;">│  │      JButton.md			组件说明文档</span></span>
<span class="line"><span style="color:#24292e;">│  │</span></span>
<span class="line"><span style="color:#24292e;">│  └─demos</span></span>
<span class="line"><span style="color:#24292e;">│         JButton			组件示例</span></span>
<span class="line"><span style="color:#24292e;">│             index.vue</span></span>
<span class="line"><span style="color:#24292e;">│</span></span>
<span class="line"><span style="color:#24292e;">└─packages</span></span>
<span class="line"><span style="color:#24292e;">    ├─JButton					组件目录</span></span>
<span class="line"><span style="color:#24292e;">    │  │  index.ts				打包暴露入口</span></span>
<span class="line"><span style="color:#24292e;">    │  │</span></span>
<span class="line"><span style="color:#24292e;">    │  └─src					组件主目录（可以存放静态资源等）</span></span>
<span class="line"><span style="color:#24292e;">    │     index.vue				组件文件</span></span>
<span class="line"><span style="color:#24292e;">    │</span></span>
<span class="line"><span style="color:#24292e;">    ├─index.ts					所有组件注册入口（新增组件需要在这里注册）</span></span>
<span class="line"><span style="color:#24292e;">    │</span></span>
<span class="line"><span style="color:#24292e;">    └─utils</span></span>
<span class="line"><span style="color:#24292e;">        useTools.ts				组件库所使用到的工具函数，不向外暴露</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="提交你的修改" tabindex="-1">提交你的修改 <a class="header-anchor" href="#提交你的修改" aria-label="Permalink to &quot;提交你的修改&quot;">​</a></h2><p>不要使用 <code>git commit</code> 来做提交；<br> 不要使用 <code>git commit</code> 来做提交；<br> 不要使用 <code>git commit</code> 来做提交；</p><p>通过<code>commitizen</code>规范<code>commit</code>，请尽量对修改做详细描述。</p><p>默认开发完毕后，通过<code>git add xxx</code>命令添加变动文件后，运行命令<code>yarn cm</code>提交<code>commit</code>。<br> 也可以直接运行命令<code>yarn ac</code>提交<code>commit</code>，默认会把你<strong>本地所有的修改</strong>提交为<code>commit</code>。</p><h1 id="本地调试" tabindex="-1">本地调试 <a class="header-anchor" href="#本地调试" aria-label="Permalink to &quot;本地调试&quot;">​</a></h1><p>本地调试工具建议用<a href="https://github.com/wclr/yalc" target="_blank" rel="noreferrer">yalc</a>。</p><p><code>yalc</code>可以通过模拟发布<code>npm</code>包并将它们存放在一个特殊的全局存储中（例如位于<code>~/.yalc</code>中），当你在项目中通过命令引入时会将包内容拉入当前项目的<code>.yalc</code>文件目录下，并在项目根目录下创建一个特殊的<code>yalc.lock</code>文件（类似<code>yarn.lock</code>和<code>package.json</code>），用来确保执行<code>yalc</code>例行程序时的一致性。</p><h2 id="全局安装yalc" tabindex="-1">全局安装yalc <a class="header-anchor" href="#全局安装yalc" aria-label="Permalink to &quot;全局安装yalc&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i yalc -g</span></span>
<span class="line"><span style="color:#e1e4e8;">或</span></span>
<span class="line"><span style="color:#e1e4e8;">yarn global add yalc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm i yalc -g</span></span>
<span class="line"><span style="color:#24292e;">或</span></span>
<span class="line"><span style="color:#24292e;">yarn global add yalc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="发布依赖" tabindex="-1">发布依赖 <a class="header-anchor" href="#发布依赖" aria-label="Permalink to &quot;发布依赖&quot;">​</a></h2><p>在所开发的依赖项目下执行发布操作</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc publish</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc publish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时如果存在npm 生命周期脚本：prepublish、prepare、prepublishOnly、prepack、preyalcpublish，会按此顺序逐一执行。如果存在：postyalcpublish、postpack、publish、postpublish，也会按此顺序逐一执行。 想要完全禁用脚本执行需要使用命令</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc publish --no-scripts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc publish --no-scripts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时就已经将依赖发布到本地仓库了。 当有新修改的包需要发布时，使用推送命令可以快速的更新所有依赖</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc publish --push</span></span>
<span class="line"><span style="color:#e1e4e8;">yalc push // 简写</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc publish --push</span></span>
<span class="line"><span style="color:#24292e;">yalc push // 简写</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>参数：</p><ul><li><code>--changed</code>，快速检查文件是否被更改</li><li><code>--replace</code>，强制替换包</li></ul><h2 id="添加依赖" tabindex="-1">添加依赖 <a class="header-anchor" href="#添加依赖" aria-label="Permalink to &quot;添加依赖&quot;">​</a></h2><p>进入到开发的项目中，执行命令</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc add [packageName]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc add [packageName]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>也可以锁定版本</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc add [packageName@version]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc add [packageName@version]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将版本锁定，避免因为本地新包推送产生影响。</p><p>参数:</p><ul><li><code>--dev</code>，将依赖添加进dependency中</li><li><code>--pure</code>，不会影响package.json文件</li><li><code>--link</code>，使用link方式引用依赖包，yalc add [packageName] --link</li><li><code>--workspace (or -W)</code>，添加依赖到workspace:协议中</li></ul><h2 id="更新依赖" tabindex="-1">更新依赖 <a class="header-anchor" href="#更新依赖" aria-label="Permalink to &quot;更新依赖&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc update</span></span>
<span class="line"><span style="color:#e1e4e8;">yalc update [packageName]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc update</span></span>
<span class="line"><span style="color:#24292e;">yalc update [packageName]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>会根据yalc.lock查找更新所有依赖</p><h2 id="移除依赖" tabindex="-1">移除依赖 <a class="header-anchor" href="#移除依赖" aria-label="Permalink to &quot;移除依赖&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc remove [packageName]</span></span>
<span class="line"><span style="color:#e1e4e8;">yalc remove --all // 移除所有依赖并还原</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc remove [packageName]</span></span>
<span class="line"><span style="color:#24292e;">yalc remove --all // 移除所有依赖并还原</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="查看仓库信息" tabindex="-1">查看仓库信息 <a class="header-anchor" href="#查看仓库信息" aria-label="Permalink to &quot;查看仓库信息&quot;">​</a></h2><p>查看本地仓库里存在的包</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc installations show</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc installations show</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>清理不需要的包</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yalc installations clean [packageName]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yalc installations clean [packageName]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>⚠注 因权限问题，可能全局安装<code>yalc</code>后，系统环境变量里面没有这个命令</p><ul><li>永久性解决方案：找网络管理员赋予你管理员权限，把<code>yalc</code>命令添加到全局环境变量里</li><li>临时性解决方案：在开发的项目中安装<code>yalc</code>包并写入<code>script</code>指令临时性解决（合代码上线需要移除这个包）</li></ul><h1 id="打包发布" tabindex="-1">打包发布 <a class="header-anchor" href="#打包发布" aria-label="Permalink to &quot;打包发布&quot;">​</a></h1><h2 id="组件站点打包发布" tabindex="-1">组件站点打包发布 <a class="header-anchor" href="#组件站点打包发布" aria-label="Permalink to &quot;组件站点打包发布&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yarn docs:deploy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yarn docs:deploy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="组件打包" tabindex="-1">组件打包 <a class="header-anchor" href="#组件打包" aria-label="Permalink to &quot;组件打包&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yarn build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yarn build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="组件发布" tabindex="-1">组件发布 <a class="header-anchor" href="#组件发布" aria-label="Permalink to &quot;组件发布&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yarn release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yarn release</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,60),c=[p];function o(i,t,r,d,u,h){return e(),s("div",null,c)}const m=a(l,[["render",o]]);export{y as __pageData,m as default};
